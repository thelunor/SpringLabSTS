FrontController -> mapping ->  CustomerController (함수단위 매핑) -함수 (모든 로직 ...DAO ,DTO ...)
                               IndexController
                               JoinController
                               
클래스 위에 @Controller, @Repository, @Service, @Component > Bean 객체 필요
>> <component-scan> element를 사용해 한번에 처리할 수 있다

CustomerController -> Service -> DB(DAO) 작업 -> Service -> CustomerController -> VIEW단 (View : Model)
*** 하나의 서비스가 여러 개의 업무를 처리해야 하는 경우가 발생 >> 기존 방식은 Transacion 처리가 어려움 > Transacion은 최소 하나 이상의 업무 ***

1. Service 단 추가: DB작업 분리 (Mybatis)
2. Controller 수정 하기: Service 객체가 필요 >> sqlsession(x)                            
---
----------------------------------------------------
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:context="http://www.springframework.org/schema/context"
 xmlns:tx="http://www.springframework.org/schema/tx"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context
      http://www.springframework.org/schema/context/spring-context.xsd
      http://www.springframework.org/schema/tx
      http://www.springframework.org/schema/tx/spring-tx.xsd">
  
  
  <bean id="driverManagerDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
    <property name="url" value="jdbc:oracle:thin:@localhost:1521:XE"></property>
    <property name="username" value="springuser"></property>
    <property name="password" value="1004"></property>
  </bean>
  
  <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
    <property name="dataSource" ref="driverManagerDataSource" />
  </bean>
    
  <!-- 공통빈 --> 
  <bean id="multipartResolver" 
    class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
             <property name="maxUploadSize" value="10485760"/>
  </bean>
  
   <!-- Transaction 만들기 -->
   <bean id="transactionManager" 
   		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   		<property name="dataSource" ref="driverManagerDataSource" /> 
   </bean>
    
   <tx:annotation-driven transaction-manager="transactionManager" /> 
   // @Transactional
</beans>

트랜잭션 처리하기
 xmlns:tx="http://www.springframework.org/schema/tx"
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/tx/spring-tx.xsd"

<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
   <beans:property name="dataSource" ref="dataSource" />
</bean>
<tx:annotation-driven transaction-manager="transactionManager" />
  
--------------------------------------------------------------------------- 
테이블 변경
alter table member
add point number;

alter table member 
add constraint ck_member_hit check(point < 3);

DAO
update member
set point = nvl(point, 0) + 1
where userid = 'hong';

->NoticeDao 인터페이스  함수 추가
->NoticeDao.xml 에 update 구문 추가
->CustomerService TEST ...


-> CustomerService
-> CustomerController 변경작업
