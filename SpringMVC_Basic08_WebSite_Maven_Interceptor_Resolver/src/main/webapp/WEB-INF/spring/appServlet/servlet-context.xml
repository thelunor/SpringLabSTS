<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd">
                           
<!--xmlns:mvc="http://www.springframework.org/schema/mvc"
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc.xsd
-->

<!--  
xml 파일
IOC 컨테이너에 적재될 bean 객체 생성과 injection (DI)

1. 필요한 controller 생성하고 bean 객체 생성 , injection
2. 현재 >> 하나의 클래스가 method 단위로 요청을 처리하는 것은 조금 뒤에 ...
   현재 controller 하나당 요청 하나를 처리 ....
   결과 : 하나의 클래스가 method 단위로 요청을 처리
   
 controller 요청당 한개
   요청 : 게시판 목록보기 (행위 업무)
              게시판 글쓰기
              게시판 글 수정하기
          
  localhost:8090/website/customer/notice.htm
  
 	추가작업>>
 	Memberdao 인터페이스 >> 구현 >> NewMemberDao >> bean 객체 생성
 	
 	context:component-scan 엘리먼트 사용시
 	클래스 상단에 
 	@Component		: 최상위 
 	@Repository		: DAO 
 	@Service		: 업무
 	@Controller		: 요청처리
 	@RestController : 비동기 요청
 	중 하나가 있으면 자동으로 bean 객체가 생성된다.

 		@Repository
 	ex) class NewMemberDao {}
 	아래 코드처럼 bean 객체를 생성할 필요가 없다.
 	<context:component-scan base-package="dao"/>
-->	

	<context:annotation-config /> <!-- @Autowired 설정을 위한 bean 객체를 자동 생성 -->
	<context:component-scan base-package="ncontroller"/>
	
	<!-- 게시판 구현  -->
	<bean id="noticeDao" class="dao.NewNoticeDao" />
	
	<!-- 회원 구현 -->
	<bean id="memberDao" class="dao.NewMemberDao" />
	
	<!--  Tiles 설정하기 -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list><!-- 설정파일 여러개 일 수 있어서 list -->
				<value>/WEB-INF/spring/appServlet/Tiles.xml</value>
			</list>
		</property>
	</bean>
	
	<bean id="urlBasedViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView" />
		<property name="order" value="1" />
	</bean>
	
	<bean id="xmlViewResolver" class="org.springframework.web.servlet.view.XmlViewResolver">
		 <property name="location">
            <value>/WEB-INF/spring/appServlet/spring-views.xml</value>
         </property>
		<property name="order" value="0" />
	</bean>
	<!--
		public String index() {
			return "index.jsp"; //view 주소
		}
		
		public String index() {
			return "customer.notice";
		}
		urlBasedViewResolver : "customer.notice" 주소로 인식하겠다. 
		Tiles 와 매핑
		<definition name = "*.*">
		-> 	* : customer >> {1} >> customer
			* : notice 	 >> {2} >> notice
	-->
	<!--  Tiles 설정 END -->
	
	<!-- HandlerInterceptor 설정 -->
	<!-- <mvc:annotation-driven /> -->
	<!-- <mvc:default-servlet-handler /> -->
	
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<bean class="common.Interceptor"/>
		</mvc:interceptor>
		
		<!-- context 이후의 주소(요청주소)-->
		<mvc:interceptor>
			<mvc:mapping path="/customer/*.htm" />
			<bean class="common.LoginInter" />
		</mvc:interceptor>
	</mvc:interceptors>

</beans>
