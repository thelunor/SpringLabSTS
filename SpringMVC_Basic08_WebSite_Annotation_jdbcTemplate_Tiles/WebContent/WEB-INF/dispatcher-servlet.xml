<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
<!--  
xml 파일
IOC 컨테이너에 적재될 bean 객체 생성과 injection (DI)

1. 필용한 controller 생성하고 bean 객체 생성 , injection
2. 현재 >> 하나의 클래스가 method 단위로 요청을 처리하는 것은 조금 뒤에 ...
   현재 controller 하나당 요청 하나를 처리 ....
   결과 : 하나의 클래스가 method 단위로 요청을 처리
   
 controller 요청당 한개
   요청 : 게시판 목록보기 (행위 업무)
              게시판 글쓰기
              게시판 글 수정하기
          
  localhost:8090/website/customer/notice.htm
  
  
   추가작업 >>
  MemberDao 인터페이스 >> 구현 >> NewMemberDao  >> 빈객체 생성 .... 
  NoticeDao 인터페이스 >> 구현 >> NewNoticeDao  >> 빈객체 생성 ....
  
  context:component-scan 엘리먼트 사용시
   클래스 상단에
  @Component  : 최상위
  @Repository : DAO
  @Service    : 업무 
  @Controller : 요청 처리
  @RestController  :  비동기 요청
  클래스는 자동으로 빈객체 생성 ....
  
 @Repository
 class NewMemberDao {}
  아래 코드처럼 빈객를 생성할 필요 없다
 <context:component-scan base-package="dao" />
-->	
<context:annotation-config />
<context:component-scan base-package="ncontroller" />

<!-- 게시판 구현 -->
<bean id="noticeDao"  class="dao.NewNoticeDao"></bean>

<!-- 회원 구현 -->
<bean id="memberDao"  class="dao.NewMemberDao"></bean>


<!--  Tiles 설정하기 -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
	 <property name="definitions">
		  <list>
		   	<value>/WEB-INF/Tiles.xml</value>
		  </list>
	 </property>
	</bean>
	<bean id="urlBasedViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	 <property name="viewClass" 
	     value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</bean> 
	<!-- 
	public String index() {
		return "index.jsp"; //view 주소
	}
	
	public String index() {
		return "customer.notice"; 
	}
	
	urlBasedViewResolver :   "customer.notice" 주소로 ....
	Tiles 와 매핑
	
	<definition name="*.*">
	* > customer >> {1} >> customer
	* > notice   >> {2} >> notice
	 
	 a.b.c.d
	 <definition name="*.*.*.*">
	 a 추출 > {1}
	 b 추출 > {2}
	 -->
<!--  Tiles 설정 END --> 
</beans> 







