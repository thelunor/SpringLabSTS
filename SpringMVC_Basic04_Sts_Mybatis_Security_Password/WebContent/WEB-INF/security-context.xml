<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
  						http://www.springframework.org/schema/security 
  						http://www.springframework.org/schema/security/spring-security.xsd">

	<!--  
		1단계
		인증과 권한 기본설정(in-memory) 방식으로 사용자를 만들고 권한 설정하기
			<security:http auto-config="true">: spring-security가 제공하는 로그인 화면과 Controller를 사용
			<security:intercept-url access="" />
			- 3.x.x => access => ROLE_USER
			- 4.x.x => access => hasRole("ROLE_USER")
			<security:authentication-manager> >> provider 구현
			<security:user authorities="" 복수형(-s)으로 표시 >> 다중권한
	-->
	<!--  
	<security:http auto-config="true">
		<security:csrf disabled="true" />
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kim" password="1004" authorities="ROLE_USER" />
				<security:user name="admin" password="1004" authorities="ROLE_ADMIN, ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	-->

	<!-- 
		2단계
		1단계 > 로그인 자동화 처리 > /login > (Controller > id, password > 인증, 권한 확인 > session ...)
							> /logout > 직접처리
		
		login 실패 시 내부적으로 error 객체를 만듦
		>> http://localhost:8090/SpringMVC_Basic03_Sts_Mybatis_Security/login?error
		
			form-login
				login-page : login form 페이지 URL
				username-parameter : form id의 name 속성값(email > id)
				password-parameter : form pw의 name 속성값
				login-processing-url : form action 값 (security를 이용해 인증처리) > 로그인 프로세스를 정의할 수 있다
				default-target-url : 로그인 성공 시 이동 URL
				authentication-failure-url : 로그인 실패 시 이동 URL
				always-use-default-target : 
					true 로 하면 무조건 default-target-url 로 이동한다. 
					false 로 하면 authentication-success-handler 대로 redirect 된다.
				authentication-success-handler-ref : 로그인 성공 시 프로세스 정의, bean id 입력
					만약 최종 로그인일시를 DB에 기록해야한다면 handler로 처리하는게 좋겠다.
					res.sendRedirect 등으로 처리
				authentication-failure-handler-ref : 로그인 실패 시 프로세스 정의, bean id 입력
				
			logout
				logout-url : 로그아웃 처리할 URL (security가 알아서 만들기 때문에, 이 경로로 요청만 하면된다)
				logout-success-url : 로그아웃 성공 시 이동 URL
				success-handler-ref : 로그아웃 성공 시 프로세스 정의, bean id 입력
				invalidate-session : 로그아웃 시 세션 삭제여부(default: true)
				
			session-management
				invalid-session-url : invalid session(세션 타임아웃 등) 일 때 이동 URL
				max-sessions : 최대 허용 가능한 세션 수
				expired-url : 중복 로그인 발생시 이동 URL (처음 접속한 세션이 invalidate가 되고 다음 요청시 invalid-session-url로 이동)
				error-if-maximum-exceeded : max-sessions을 넘었을때 접속한 세션을 실패처리할지 여부 (expired-url와 얘중에 하나만 쓰면 될듯)
	-->
	<!--  
	<security:http>
		<security:csrf disabled="true" />
		<security:form-login login-page="/joinus/login.htm"
							authentication-failure-url="/joinus/login.htm?error" />
		<security:logout logout-success-url="/index.htm" />
		<security:intercept-url pattern="/customer/noticeDetail.htm" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/customer/noticeReg.htm" access="hasRole('ROLE_ADMIN')" />
	</security:http>
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<security:user name="kim" password="1004" authorities="ROLE_USER" />
				<security:user name="admin" password="1004" authorities="ROLE_ADMIN, ROLE_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	-->
<!-- 
	<Spring에서 제공하는 로그인 화면 소스> >> 자동으로 만들어주는
		<html><head><title>Login Page</title></head><body onload='document.f.username.focus();'>
		<h3>Login with Username and Password</h3><form name='f' action='/SpringMVC_Basic03_Sts_Mybatis_Security/login' method='POST'>
		<table>
			<tr><td>User:</td><td><input type='text' name='username' value=''></td></tr>
			<tr><td>Password:</td><td><input type='password' name='password'/></td></tr>
			<tr><td colspan='2'><input name="submit" type="submit" value="Login"/></td></tr>
		</table>
		</form></body></html>
-->

	<security:http>
		<security:csrf disabled="true" />
		<security:form-login default-target-url="/index.htm"
							login-page="/joinus/login.htm"
							authentication-failure-url="/joinus/login.htm?error" />
		<security:logout logout-success-url="/index.htm" />
		<security:intercept-url pattern="/customer/**" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/joinus/member*.htm" access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />                    
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="driverManagerDataSource"
										users-by-username-query="SELECT USERID, pwd AS PASSWORD, 1 enabled FROM member where userid=?"
										authorities-by-username-query="select m.USERID, r.ROLE_NAME  
															           from member m join roll r 
															           on m.userid = r.userid 
															           where m.userid=?" />
			<security:password-encoder ref="bCryptPasswordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>
	
</beans>
