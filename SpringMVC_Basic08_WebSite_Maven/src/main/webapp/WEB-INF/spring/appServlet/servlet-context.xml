<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd">
<!--  
xml 파일
IOC 컨테이너에 적재될 bean 객체 생성과 injection (DI)

1. 필용한 controller 생성하고 bean 객체 생성 , injection
2. 현재 >> 하나의 클래스가 method 단위로 요청을 처리하는 것은 조금 뒤에 ...
   현재 controller 하나당 요청 하나를 처리 ....
   결과 : 하나의 클래스가 method 단위로 요청을 처리
   
 controller 요청당 한개
   요청 : 게시판 목록보기 (행위 업무)
              게시판 글쓰기
              게시판 글 수정하기
          
  localhost:8090/website/customer/notice.htm
  
	추가 작업
	MemberDao 인터페이스 > implements(구현) > NewMemberDao > bean 객체 생성되어야 한다
	NoticeDao 인터페이스 > implements(구현) > NewNoticeDao > bean 객체 생성되어야 한다
	
	<context:component-scan element 사용 시
	클래스 상단에
		1. @Component: 최상위 개념
		2. @Repository: DAO
		3. @Service: 업무
		4. @Controller: 요청처리 클래스
		5. @RestController: 비동기 요청 처리(동기 포함)
	클래스는 자동으로 bean 객체 생성된다
	
	ex)
	@Repository
	class NewMemberDao { }
	하게 될 경우 아래 코드처럼 bean 객체를 생성할 필요가 없다
	<context:component-scan base-package="dao" />
-->	
	<context:annotation-config />
	<context:component-scan base-package="ncontroller" />
	
	<!-- <bean class="ncontroller.CustomerController"></bean> > 위 component-scan 때문에 필요없다-->
	
	<!-- 게시판 구현 -->
	<bean id="newNoticeDao" class="dao.NewNoticeDao"></bean>
	
	<!-- 회원 구현 -->
	<bean id="newMemberDao" class="dao.NewMemberDao"></bean>

	<!-- Tiles 설정하기 -->
	<bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<property name="definitions">
			<list><!-- 설정을 담당하는 xml 파일이 하나가 아니라 여러 개일 수도 있기 때문에 list -->
				<value>/WEB-INF/spring/appServlet/Tiles.xml</value>
			</list>
		</property>
	</bean>
	<bean id="urlBasedViewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</bean>
	<!--  
		public String index() {
			return "index.jsp"; // view 주소
		}
		
		public String index() {
			return "customer.notice";
		}
		
		urlBasedViewResolver: "customer.notice" 주소로...
		Tiles와 매핑
		
		<definition name="*.*"> 정규표현식
		첫 번째 * > customer > {1} > customer
		두 번째 * > notice > {2} > notice
		
		a.b.c.d
		>> <definition name="*.*.*.*">
		a 추출 > {1}
		b 추출 > {2}
		...
		d 추출 > {4}
	-->
	<!-- Tiles 설정 END -->
	
</beans>
